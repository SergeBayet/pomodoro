{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","Component","PomodoroTimer","props","setBreakLength","e","lengthControl","currentTarget","value","state","breakLength","setSessionLength","sessionLength","stateToChange","sign","currentLength","timerType","timerState","setState","timerControl","beginCountDown","intervalID","clear","accurateInterval","decrementTimer","phaseControl","timer","warning","buzzer","switchTimer","alarmColor","color","audioBeep","play","num","str","reset","pause","currentTime","clockify","minutes","Math","floor","seconds","className","id","title","decrementId","incrementId","lengthId","length","this","onClick","style","preload","src","ref","audio","TimerLengthControl","Header","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f50ae1a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport accurateInterval from \"accurate-interval\";\n\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header />\n\t\t\t\t<PomodoroTimer />\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass PomodoroTimer extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tbreakLength: 5,\n\t\t\tsessionLength: 25,\n\t\t\ttimerType: 'Session',\n\t\t\ttimerState: 'stopped',\n\t\t\ttimer: 1500,\n\t\t\tintervalID: '',\n\t\t\talarmColor: { color: 'white' }\n\t\t}\n\t}\n\tsetBreakLength = (e) => {\n\t\tthis.lengthControl('breakLength', e.currentTarget.value, this.state.breakLength, 'Break');\n\t}\n\tsetSessionLength = (e) => {\n\t\tthis.lengthControl('sessionLength', e.currentTarget.value, this.state.sessionLength, 'Session');\n\t}\n\tlengthControl = (stateToChange, sign, currentLength, timerType) => {\n\t\tif (this.state.timerState === 'running') return;\n\t\tif (this.state.timerType !== timerType) {\n\t\t\tif (sign === \"-\" && currentLength !== 1) {\n\t\t\t\tthis.setState({ [stateToChange]: currentLength - 1 });\n\t\t\t} else if (sign === \"+\" && currentLength !== 60) {\n\t\t\t\tthis.setState({ [stateToChange]: currentLength + 1 });\n\t\t\t}\n\t\t} else {\n\t\t\tif (sign === \"-\" && currentLength !== 1) {\n\t\t\t\tthis.setState({\n\t\t\t\t\t[stateToChange]: currentLength - 1,\n\t\t\t\t\ttimer: currentLength * 60 - 60\n\t\t\t\t});\n\t\t\t} else if (sign === \"+\" && currentLength !== 60) {\n\t\t\t\tthis.setState({\n\t\t\t\t\t[stateToChange]: currentLength + 1,\n\t\t\t\t\ttimer: currentLength * 60 + 60\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\ttimerControl = () => {\n\t\tif (this.state.timerState === 'stopped') {\n\t\t\tthis.beginCountDown();\n\t\t\tthis.setState({ timerState: 'running' });\n\t\t}\n\t\telse {\n\t\t\tthis.setState({ timerState: 'stopped' });\n\t\t\tthis.state.intervalID && this.state.intervalID.clear();\n\t\t}\n\n\t}\n\tbeginCountDown = () => {\n\t\tthis.setState({\n\t\t\tintervalID: accurateInterval(() => {\n\t\t\t\tthis.decrementTimer();\n\t\t\t\tthis.phaseControl();\n\t\t\t}, 1000)\n\t\t})\n\t}\n\tdecrementTimer = () => {\n\t\tthis.setState({\n\t\t\ttimer: this.state.timer - 1\n\t\t})\n\t}\n\tphaseControl = () => {\n\t\tlet timer = this.state.timer;\n\t\tthis.warning(timer);\n\t\tthis.buzzer(timer);\n\t\tif (timer < 0) {\n\t\t\tif (this.state.timerType === 'Session') {\n\t\t\t\tthis.state.intervalID && this.state.intervalID.clear();\n\t\t\t\tthis.beginCountDown();\n\t\t\t\tthis.switchTimer(this.state.breakLength * 60, 'Break');\n\t\t\t} else {\n\t\t\t\tthis.state.intervalID && this.state.intervalID.clear();\n\t\t\t\tthis.beginCountDown();\n\t\t\t\tthis.switchTimer(this.state.sessionLength * 60, 'Session');\n\t\t\t}\n\t\t}\n\t}\n\twarning = (timer) => {\n\t\tif (timer < 61) {\n\t\t\tthis.setState({\n\t\t\t\talarmColor: { color: 'red' }\n\t\t\t})\n\t\t}\n\t\telse {\n\t\t\tthis.setState({\n\t\t\t\talarmColor: { color: 'white' }\n\t\t\t})\n\t\t}\n\t}\n\tbuzzer = (timer) => {\n\t\tif (timer === 0) {\n\t\t\tthis.audioBeep.play();\n\t\t}\n\t}\n\tswitchTimer = (num, str) => {\n\t\tthis.setState({\n\t\t\ttimer: num,\n\t\t\ttimerType: str,\n\t\t\talarmColor: { color: 'white' }\n\t\t})\n\t}\n\treset = () => {\n\t\tthis.setState({\n\t\t\tbreakLength: 5,\n\t\t\tsessionLength: 25,\n\t\t\ttimerState: 'stopped',\n\t\t\ttimerType: 'Session',\n\t\t\ttimer: 1500,\n\t\t\tintervalID: '',\n\t\t\talarmColor: { color: 'white' }\n\t\t});\n\t\tthis.state.intervalID && this.state.intervalID.clear();\n\t\tthis.audioBeep.pause();\n\t\tthis.audioBeep.currentTime = 0;\n\t}\n\tclockify = () => {\n\t\tlet minutes = Math.floor(this.state.timer / 60);\n\t\tlet seconds = this.state.timer - minutes * 60;\n\t\tseconds = seconds < 10 ? '0' + seconds : seconds;\n\t\tminutes = minutes < 10 ? '0' + minutes : minutes;\n\t\treturn minutes + ':' + seconds;\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"pomodoro-timer\">\n\t\t\t\t\t<div className=\"time-length-control\">\n\t\t\t\t\t\t<TimerLengthControl\n\t\t\t\t\t\t\tid=\"break-label\"\n\t\t\t\t\t\t\ttitle=\"Break length\"\n\t\t\t\t\t\t\tdecrementId=\"break-decrement\"\n\t\t\t\t\t\t\tincrementId=\"break-increment\"\n\t\t\t\t\t\t\tlengthId=\"break-length\"\n\t\t\t\t\t\t\tlength={this.state.breakLength}\n\t\t\t\t\t\t\tonClick={this.setBreakLength}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TimerLengthControl\n\t\t\t\t\t\t\tid=\"session-label\"\n\t\t\t\t\t\t\ttitle=\"Session length\"\n\t\t\t\t\t\t\tdecrementId=\"session-decrement\"\n\t\t\t\t\t\t\tincrementId=\"session-increment\"\n\t\t\t\t\t\t\tlengthId=\"session-length\"\n\t\t\t\t\t\t\tlength={this.state.sessionLength}\n\t\t\t\t\t\t\tonClick={this.setSessionLength}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t\t<div className=\"timer\" style={this.state.alarmColor}>\n\t\t\t\t\t<div className=\"timer-wrapper\">\n\t\t\t\t\t\t<div id='timer-label'>\n\t\t\t\t\t\t\t{this.state.timerType}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id='time-left'>\n\t\t\t\t\t\t\t{this.clockify()}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"timer-control\">\n\t\t\t\t\t<button id=\"start_stop\" onClick={this.timerControl}>\n\t\t\t\t\t\t<i className=\"fa fa-play fa-2x\" />\n\t\t\t\t\t\t<i className=\"fa fa-pause fa-2x\" />\n\t\t\t\t\t</button>\n\t\t\t\t\t<button id=\"reset\" onClick={this.reset}>\n\t\t\t\t\t\t<i className=\"fa fa-refresh fa-2x\" />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<audio id=\"beep\" preload=\"auto\"\n\t\t\t\t\tsrc=\"https://goo.gl/65cBl1\"\n\t\t\t\t\tref={(audio) => { this.audioBeep = audio; }} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass TimerLengthControl extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div id={this.props.id}>\n\t\t\t\t<h2>{this.props.title}</h2>\n\t\t\t\t<div className=\"controls\">\n\t\t\t\t\t<button className=\"btn-level\" value=\"-\" id={this.props.decrementId} onClick={this.props.onClick}>\n\t\t\t\t\t\t<i className=\"fa fa-arrow-down\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t\t<span id={this.props.lengthId}>{this.props.length}</span>\n\t\t\t\t\t<button className=\"btn-level\" value=\"+\" id={this.props.incrementId} onClick={this.props.onClick}>\n\t\t\t\t\t\t<i className=\"fa fa-arrow-up\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass Header extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<header>\n\t\t\t\t<div className=\"title\">\n\t\t\t\t\t<h1>Pomodoro Timer</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"society\">\n\t\t\t\t\t<h1>BeCode</h1>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t);\n\t}\n}\n\nclass Footer extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<footer>\n\t\t\t\t<div className=\"copyright\">Copyright 2019. Serge Bayet</div>\n\t\t\t</footer>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}